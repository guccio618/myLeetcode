import java.util.*;

public class Q425_Word_Squares {
	private TrieNode root = new TrieNode();
	
    public List<List<String>> wordSquares(String[] words) {
        List<List<String>> ans = new ArrayList<>();
        
        if(words.length == 0) { 
        	return ans;
        }
        
        buildTrie(words);
        int length = words[0].length();
        findSquare(ans, length, new ArrayList<>());
        return ans;
    }
    
    public void findSquare(List<List<String>> ans, int length, List<String> list) {
        if(list.size() == length) {
            ans.add(new ArrayList<>(list));
            return;
        }
        
        int index = list.size();
        StringBuilder sb = new StringBuilder();
        
        for(String s : list) {
            sb.append(s.charAt(index));
        }
        
        String s = sb.toString();
        TrieNode node = root;
        
        // find next word
        for(int i = 0; i < s.length(); i++) {
            if(node.next[s.charAt(i) - 'a'] != null) {
                node = node.next[s.charAt(i) - 'a'];
            } else {
                node = null;
                break;
            }
        }
        
        if(node != null) {
            for(String next : node.words) {
                list.add(next);
                findSquare(ans, length, list);
                list.remove(list.size() - 1);
            }
        }
    }
    
    public void buildTrie(String[] words) {
        for(String word : words) {
            TrieNode node = root;
            char[] array = word.toCharArray();
            
            for(char c : array) {
                node.words.add(word);
                
                if(node.next[c - 'a'] == null) {
                    node.next[c - 'a'] = new TrieNode();
                }
                
                node = node.next[c - 'a'];
            }
            
            node.words.add(word);
        }
    }
    
    class TrieNode {
        TrieNode[] next = new TrieNode[26];
        List<String> words = new ArrayList<>();
    }
}
