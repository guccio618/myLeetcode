import java.util.*;


public class Q480_Sliding_Window_Median {
	// test case: [1] [k = 1], [2147483647,2147483647] [k = 2], 
	// [-2147483648,-2147483648,2147483647,-2147483648,-2147483648,-2147483648,2147483647,2147483647,2147483647,2147483647,-2147483648,2147483647,-2147483648] [k = 3]
	
	public double[] medianSlidingWindow(int[] nums, int k) {
        if(nums == null || nums.length == 0 || k <= 0) {
            return new double[0];
        } else if(k > nums.length) {
            k = nums.length;
        }
        
        Queue<Integer> maxHeap = new PriorityQueue<>();
        Queue<Integer> minHeap = new PriorityQueue<>();
        Integer median = null;
        int startPos = 0, len = nums.length;
        int index = 0;
        double[] ans = new double[len - k + 1];
                
        for(int i = 0; i < len; i++) {
            if(i - startPos + 1 > k) {
                if(nums[startPos] < median) {
                    maxHeap.remove(-nums[startPos]);
                } else if(nums[startPos] > median){
                    minHeap.remove(nums[startPos]);
                } else {
                	median = (maxHeap.size() > minHeap.size()) ? -maxHeap.poll() : minHeap.poll();
                }
                
                startPos++;
            }
            
            if(median == null) {
            	median = nums[i];
            } else if(nums[i] < median) {
                maxHeap.offer(-nums[i]);
            } else {
                minHeap.offer(nums[i]);
            }
            
            while(maxHeap.size() + 1 < minHeap.size()) {
                maxHeap.offer(-median);
                median = minHeap.poll();
            } 
            while(minHeap.size() < maxHeap.size()) {
                minHeap.offer(median);
                median = -maxHeap.poll();
            }
            
//            System.out.println("startPos = " + startPos + ", i = " + i + ", median = " + median + ", size1 = " + maxHeap.size() + ", size2 = " + minHeap.size());
            
            if(i + 1 >= k) {
                if(k % 2 != 0) {
                    ans[index++] = (double) median;
                } else {
                    double num = (maxHeap.size() > minHeap.size()) ? -maxHeap.peek() : minHeap.peek();
                    ans[index++] = (median + num) / 2.0;
                }
            }
        }
        
        return ans;
    }
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	/******************************** main function ******************************************/
	
	public static void main(String[] args) {
		Q480_Sliding_Window_Median t = new Q480_Sliding_Window_Median();
//		int[] nums = {1,3,-1,-3,5,3,6,7};
		int[] nums = {-1,-1,1,-1,-1,-1,1,1,1,1,-1,1,-1};
		int k = 3;
		double[] ans = t.medianSlidingWindow(nums, k);
		
		for(double elem : ans) {
			System.out.print(elem + " ");
		}
	}
}
