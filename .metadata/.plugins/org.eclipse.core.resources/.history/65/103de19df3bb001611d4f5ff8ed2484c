import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.PriorityQueue;

class Cpoint {
	double x;
	double y;

	public Cpoint(double x, double y) {
		this.x = x;
		this.y = y;
	}

	@Override
	public String toString() {
		return "X: " + x + "Y: " + y;
	}
}
public class Kclose {
	public Cpoint[] findKCloseHEAP(Cpoint[] list, int k) {
		if(list==null || list.length==0){
			return new Cpoint[]{};
		}
		if(k<0){
			return new Cpoint[]{};
		}
		if(k>=list.length){
			return list;
		}
		Cpoint[] res = new Cpoint[k];
		PriorityQueue<Cpoint> queue = new PriorityQueue<>(k ,new Comparator<Cpoint>(){
			@Override
			public int compare(Cpoint o1, Cpoint o2){
				return Double.compare(o1.x*o1.x + o1.y*o1.y, o2.x*o2.x + o2.y*o2.y);
			}
		});
		for(int i = 0 ; i<list.length ; i++){
			queue.add(list[i]);
			if(queue.size()>k){
				queue.poll();
			}
		}
		for(int i = res.length-1 ; i>=0; i--){
			res[i] = queue.poll();
		}
		System.out.println(Arrays.toString(res));
		return res;
	}
	public static void main(String[] args) {
		Kclose kclose = new Kclose();
		Cpoint[] list = new Cpoint[3];
//		for (int i = 0; i < list.length; i++) {
//			list[i] = new Cpoint(-i, i);
//		}
		list[0] = new Cpoint(-1,1);
		list[1] = new Cpoint(1,1);
		list[2] = new Cpoint(1,-1);
		// kclose.findKClose(list, 10);
		// kclose.findKCloseHEAP(list, 10);
		kclose.findKCloseHEAP(list, 2);
	}
}
