import java.util.ArrayList;
import java.util.List;

public class Left_Leaf_Of_Tree {
	private int totalLevel = 0;
	private int[] ans;
	
	public int[] getLeaves(TreeNode root) {
		if(root == null) {
			return new int[0];
		}
		
		List<Integer> ans1 = new ArrayList<>(10);
		
		System.out.println(ans1.get(2));
		
		totalLevel = getHeight(root);
		ans = new int[totalLevel];
		
//		System.out.println(totalLevel);
		
		for(int i = 0; i < ans.length; i++) {
			ans[i] = (Integer) (null);
		}
		
		DFS(root, ans, 0);
		return ans;
	}
	
	public void DFS(TreeNode node, int[] ans, int curLevel) {
		if(node == null || curLevel > totalLevel || ans[curLevel] != (Integer) null) {
			return;
		} 
		
		ans[curLevel] = node.value;
		DFS(node.left, ans, curLevel + 1);
		DFS(node.right, ans, curLevel + 1);
	}
	
	public int getHeight(TreeNode node) {
		if(node == null) {
			return 0;
		}
		
		return Math.max(getHeight(node.left), getHeight(node.right)) + 1;
	}
	
	
	
	
	public static void main(String[] args) {
		Left_Leaf_Of_Tree t = new Left_Leaf_Of_Tree();
		TreeNode root = new TreeNode(1);
		root.left = new TreeNode(2);
		root.right = new TreeNode(3);
		root.left.right = new TreeNode(4);
		root.left.right.left = new TreeNode(6);
		root.right.right = new TreeNode(5);
		
		int[] ans = t.getLeaves(root);
		
		for(int elem : ans) {
			System.out.print(elem + " ");
		}
	}
	
	/*****
	
	   1
	   
	  
	***/
	
}


class TreeNode {
	int value;
	TreeNode left, right;
	
	public TreeNode(int value) {
		this.value = value;
		left = right = null;
	}
}
