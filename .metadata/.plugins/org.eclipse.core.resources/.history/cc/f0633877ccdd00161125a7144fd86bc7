
public class Q14_1_Find_Word_In_Dice {
	public boolean FindWordInDice(String[] dices, String target) {
		if(target == null || target.length() == 0) {
			return true;
		} else if(dices == null || dices.length == 0) {
			return false;
		}  
		
		boolean[][] visited = new boolean[dices.length][dices[0].length()];
		
		for(int i = 0; i < dices.length; i++) {
			for(int j = 0; j < dices[0].length(); j++) {
				if(backtrack(dices, visited, i, j, 0, target)) {
					return true;
				}
			}
		}
		
		return false;
	}
	
	public boolean backtrack(String[] dices, boolean[][] visited, int x, int y, int start, String target) {
		if(visited[x][y]) {
			return false;
		} else if(dices[x].charAt(y) != target.charAt(start)) {
			return false;
		} else if(start == target.length() - 1) {
			return true;
		}
		
		visited[x][y] = true;
		int[] dx = {0, 0, 1, -1};
		int[] dy = {1, -1, 0, 0};
		
		for(int i = 0; i < 4; i++) {
			int newX = x + dx[i];
			int newY = y + dy[i];
			
			if(newX >= 0 && newX < dices.length && newY >= 0 && newY < dices[0].length()) {
				if(backtrack(dices, visited, newX, newY, start + 1, target)) {
					return true;
				}
			}
		}
		
		visited[x][y] = false;
		return false;
	}
	
	
	
	
	// follow up 1:
	public boolean FindWordInDice_follow_up_1(String[] dices, String target) {
		if(target == null || target.length() == 0) {
			return true;
		} else if(dices == null || dices.length == 0) {
			return false;
		}  
		
		boolean[][] visited = new boolean[dices.length][dices[0].length()];
		
		for(int i = 0; i < dices.length; i++) {
			for(int j = 0; j < dices[0].length(); j++) {
				if(backtrack1(dices, visited, i, j, 0, target)) {
					return true;
				}
			}
		}
		
		return false;
	}
	
	public boolean backtrack1(String[] dices, boolean[][] visited, int x, int y, int start, String target) {
		if(visited[x][y]) {
			return false;
		} else if(dices[x].charAt(y) != '*' && dices[x].charAt(y) != target.charAt(start)) {
			return false;
		} else if(start == target.length() - 1) {
			return true;
		}
		
		visited[x][y] = true;
		int[] dx = {0, 0, 1, -1};
		int[] dy = {1, -1, 0, 0};
		
		for(int i = 0; i < 4; i++) {
			int newX = x + dx[i];
			int newY = y + dy[i];
			
			if(newX >= 0 && newX < dices.length && newY >= 0 && newY < dices[0].length()) {
				if(backtrack(dices, visited, newX, newY, start + 1, target)) {
					return true;
				}
			}
		}
		
		visited[x][y] = false;
		return false;
	}
}
