
public class Le_141_Linked_List_Cycle {
	public boolean hasCycle(ListNode head) {
        if(head == null || head.next == null){
            return false;
        }
        
        ListNode faster = head.next, slower = head;  // 注意，faster必须和slower在开始时错开
        
        while(faster != null && faster.next != null && faster != slower){
            faster = faster.next.next;
            slower = slower.next;
        }
        
        return faster == slower;
    }
	
	public boolean hasCycle2(ListNode head) {
        if(head == null || head.next == null){
            return false;
        }
        
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode faster = dummy;
        ListNode slower = dummy;
        
        while(faster != null && faster.next != null){
            if(faster == slower && faster != dummy){
                return true;
            } else {
            	faster = faster.next.next;
                slower = slower.next;
            }
        }
        
        return false;
    }
	
	
	
	public static void main(String[] args){
		Le_141_Linked_List_Cycle t = new Le_141_Linked_List_Cycle();
		ListNode head = new ListNode(1);
		head.next = new ListNode(2);
		System.out.println(t.hasCycle2(head));
	}
}
