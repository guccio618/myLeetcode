import java.util.*;


public class Q480_Sliding_Window_Median {
	public double[] medianSlidingWindow(int[] nums, int k) {
        if(nums == null || nums.length == 0 || k <= 0) {
            return new double[0];
        } else if(k > nums.length) {
            k = nums.length;
        }
        
        Queue<Integer> maxHeap = new PriorityQueue<>();
        Queue<Integer> minHeap = new PriorityQueue<>();
        Integer median = null;
        int startPos = 0, len = nums.length;
        int index = 0;
        double[] ans = new double[len - k + 1];
                
        for(int i = 0; i < len; i++) {
            if(i - startPos + 1 > k) {
                if(nums[i] < medium) {
                    maxHeap.remove(-nums[i]);
                } else {
                    minHeap.remove(nums[i]);
                }
            }
            
            if(nums[i] < medium) {
                maxHeap.offer(-nums[i]);
            } else {
                minHeap.offer(nums[i]);
            }
            
            while(maxHeap.size() + 1 < minHeap.size()) {
                maxHeap.offer(-medium);
                medium = minHeap.poll();
            } 
            while(minHeap.size() < maxHeap.size()) {
                minHeap.offer(medium);
                medium = -maxHeap.poll();
            }
            
            if(i + 1 >= k) {
                if(k % 2 != 0) {
                    ans[index++] = (double) medium;
                } else {
                    int num = (maxHeap.size() > minHeap.size()) ? -maxHeap.peek() : minHeap.peek();
                    ans[index++] = (medium + num) / 2.0;
                }
            }
        }
        
        return ans;
    }
}
