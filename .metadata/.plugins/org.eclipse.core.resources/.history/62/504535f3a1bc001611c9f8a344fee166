package TheTOP9;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;


class Connection {
	String node1;
	String node2;
	int cost;

	public Connection() {

	}

	public Connection(String a, String b, int c) {
		node1 = a;
		node2 = b;
		cost = c;
	}

	@Override
	public String toString() {
		return node1 + " " + node2 + " " + cost;
	}
}

public class Kruskal {

	public ArrayList<Connection> connect(ArrayList<Connection> connections) {
		// by implementing the Kruskal Algorithm and with help of Union Find structure
		// find the all possible low cost ways to connect those cities
		if(connections==null || connections.size()==0){
			return new ArrayList<>();
		}
		ArrayList<Connection>  res = new ArrayList<>();
		HashMap<String, Integer> map = new HashMap<>();
		int cityCount = 0;
		int connectionCount = 0;
		for(Connection i : connections){
			String a = i.node1;
			String b = i.node2;
			if(!map.containsKey(a)){
				map.put(a, cityCount++);
			}
			if(!map.containsKey(b)){
				map.put(b, cityCount++);
			}
		}
		Collections.sort(connections , new Comparator<Connection>(){
			@Override 
			public int compare(Connection a, Connection b){
				return a.cost - b.cost;
			}
		});
		int[] uf  = new int [cityCount];
		for(int i = 0 ; i<uf.length ; i++){
			uf[i] = i;
		}
		int cost=0;
		for(int i = 0 ; i<connections.size(); i++){
			Connection c = connections.get(i);
			int one = map.get(c.node1);
			int two = map.get(c.node2);
			int findOne = find(uf, one);
			int findTwo = find(uf, two);
			if(findOne != findTwo){
				connectionCount ++;
				cost += c.cost;
				res.add(c);
				uf[findOne] = findTwo; // union
			}
			System.out.println(Arrays.toString(uf));
			if(connectionCount+1 == cityCount){
				break;
			}
		}
//		System.out.println(Arrays.toString(uf));
		System.out.println(cost);
		Collections.sort(res , new Comparator<Connection>(){
			@Override
			public int compare(Connection c1 , Connection c2){
				if(c1.node1.equals(c2.node1)){
					return c1.node2.compareTo(c2.node2);
				}else{
					return c1.node1.compareTo(c2.node1);
				}
			}
		});
		for (int i = 0; i < res.size(); i++) {
			System.out.println(res.get(i));
		}
		return connectionCount+1 == cityCount ? res : null; // pat attention!!!!! null
	}
	public static int find(int [] arr , int i){
		while(arr[i]!=i){
			arr[i] = arr[arr[i]]; // path compression,for performance improve
			i = arr[i];
		}
		return i;
	}

	public static void main(String[] args) {
		Kruskal kruskal = new Kruskal();
		ArrayList<Connection> list = new ArrayList<>();

		Connection c1 = new Connection("A", "B", 1);
		Connection c2 = new Connection("A", "D", 9);
		Connection c3 = new Connection("A", "C", 6);
		Connection c4 = new Connection("B", "D", 3);
		Connection c5 = new Connection("B", "E", 8);
		Connection c6 = new Connection("D", "E", 24);
		Connection c7 = new Connection("C", "E", 2);
		Connection c8 = new Connection("A", "B", 2);

		list.add(c1);
		list.add(c2);
		list.add(c3);
		list.add(c4);
		list.add(c5);
		list.add(c6);
		list.add(c7);
		list.add(c8);

		System.out.println(kruskal.connect(list));
	}
}
