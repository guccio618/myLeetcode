import java.util.*;

public class Q317_Shortest_Distance_from_All_Buildings {
	

	public int shortestDistance(int[][] grid) {
		if(grid == null || grid.length == 0 || grid[0].length == 0) {
			return 0;
		}
		
	    int row = grid.length, col = grid[0].length;
	    int[][] dist = new int[row][col];
	    List<Tuple> buildings = new ArrayList<>();
	    
	    // Initialize building list and accessibility matrix `grid`
	    for (int i = 0; i < row; ++i) {
	        for (int j = 0; j < col; ++j) {
	            if (grid[i][j] == 1) {
	                buildings.add(new Tuple(i, j, 0));
	            }
	            grid[i][j] = -grid[i][j];
	        }
	    }
	    
	    // BFS from every building
	    for (int k = 0; k < buildings.size(); ++k) {
	        bfs(buildings.get(k), k, dist, grid, row, col);
	    }
	    
	    // Find the minimum distance
	    int ans = -1;
	    
	    for (int i = 0; i < row; ++i) {
	        for (int j = 0; j < col; ++j) {
	            if (grid[i][j] == buildings.size() && (ans < 0 || dist[i][j] < ans)) {
	                ans = dist[i][j];
	            }
	        }
	    }
	    
	    return ans;
	}

	public void bfs(Tuple root, int k, int[][] dist, int[][] grid, int m, int n) {
		int[] dx = {1, 0, -1, 0};
		int[] dy = {0, 1, 0, -1};
	    Queue<Tuple> queue = new ArrayDeque<>();
	    queue.add(root);
	    
	    while (!queue.isEmpty()) {
	        Tuple t = queue.poll();
	        dist[t.y][t.x] += t.distance;
	        
	        for (int i = 0; i < 4; ++i) {
	            int newX = t.x + dx[i];
	            int newY = t.y + dy[i];
	            
	            if (newX >= 0 && newX < n && newY >= 0 && newY < m && grid[newY][newX] == k) {
	                grid[newY][newX] = k + 1;
	                queue.add(new Tuple(newY, newX, t.distance + 1));
	            }
	        }
	    }
	}
	
	class Tuple {
	    public int y;
	    public int x;
	    public int distance;

	    public Tuple(int y, int x, int distance) {
	        this.y = y;
	        this.x = x;
	        this.distance = distance;
	    }
	}
}
