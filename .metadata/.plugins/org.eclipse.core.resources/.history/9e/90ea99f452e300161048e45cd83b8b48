import java.util.Stack;


public class Q150_Evaluate_Reverse_Polish_Notation {
	// solution 1: using stack
	public int evalRPN(String[] tokens) {
        if(tokens == null || tokens.length == 0) {
            return 0;
        }
        
        Stack<Integer> stack = new Stack<>();
        
        for(String str : tokens) {
            if(str.equals("+")) {
                if(stack.size() < 2) {
                    return -1;
                } else {
                    int num2 = stack.pop();
                    int num1 = stack.pop();
                    stack.push(num1 + num2);
                }
            } else if(str.equals("-")) {
                if(stack.size() < 2) {
                    return -1;
                } else {
                    int num2 = stack.pop();
                    int num1 = stack.pop();
                    stack.push(num1 - num2);
                }
            } else if(str.equals("*")) {
                if(stack.size() < 2) {
                    return -1;
                } else {
                    int num2 = stack.pop();
                    int num1 = stack.pop();
                    stack.push(num1 * num2);
                }
            } else if(str.equals("/")) { 
                if(stack.size() < 2) {
                    return -1;
                } else {
                    int num2 = stack.pop();
                    int num1 = stack.pop();
                    stack.push(num1 / num2);
                }
            } else {
                stack.push(Integer.parseInt(str));
            }
        }
        
        return stack.size() == 1 ? stack.pop() : -1;
    }
	
	
	
	
	
	
	
	
	
	
	/******************************* main function **********************************/
	
	public static void main(String[] args){
		Q150_Evaluate_Reverse_Polish_Notation e = new Q150_Evaluate_Reverse_Polish_Notation();
		String[] strs = {"4", "13", "5", "/", "+"};
		System.out.println(e.evalRPN(strs));
	}
}
