import java.util.ArrayList;

class multiTreeNode {
	int val;
	ArrayList<multiTreeNode> sub;

	public multiTreeNode(int val, ArrayList<multiTreeNode> sub) {
		this.val = val;
		this.sub = new ArrayList<>(sub);
	}
	@Override
	public String toString() {
		// TODO Auto-generated method stub
		return this.val+"";
	}
}

class parcel{
	TreeNode big;
	double ave;
	public parcel(TreeNode big , double ave) {
		this.big = big;
		this.ave = ave;
	}
}
public class AveHigh {
	public TreeNode solve(TreeNode root) {
		parcel recoder = new parcel(null, Double.MIN_VALUE);
		DFS(root, recoder);
		return recoder.big;
		
	}
	
	public double[] DFS(TreeNode root, parcel recorder) {
		double[] res = new double[2];
		if(root==null){
			return res;
		}
		res[0] = 1;
		res[1] = root.val;
		if(root.sub==null || root.sub.size()==0){
			return res;
		}
		for(int i = 0 ; i<root.sub.size() ;i++){
			double[] temp =  DFS(root.sub.get(i), recorder);
			res[0] += temp[0];
			res[1] += temp[1];
		}
		if(res[1]/res[0] > recorder.ave){
			recorder.ave = res[1]/res[0];
			recorder.big = root;
		}
		System.out.println(recorder.ave);
		System.out.println(recorder.big);
		return res;
	}

	public static void main(String [] args){
		AveHigh high = new AveHigh();
		TreeNode E5 = new TreeNode(500, new ArrayList<>());
		TreeNode E4 = new TreeNode(4, new ArrayList<>());
		TreeNode E3 = new TreeNode(3, new ArrayList<>());
		ArrayList<TreeNode> e2 = new ArrayList<>();
		e2.add(E3);
		e2.add(E4);
		TreeNode E2 = new TreeNode(2, e2);
		ArrayList<TreeNode> e1 = new ArrayList<>();
		e1.add(E2);
		e1.add(E5);
		TreeNode E1 = new TreeNode(1, e1);
		
		TreeNode D1 = new TreeNode(1, new ArrayList<>());
		
		TreeNode C1 = new TreeNode(1, new ArrayList<>());
		TreeNode C2 = new TreeNode(2, new ArrayList<>());
		
		TreeNode B1 = new TreeNode(100, new ArrayList<>());
		TreeNode B2 = new TreeNode(2, new ArrayList<>());
		TreeNode B3 = new TreeNode(3, new ArrayList<>());
		
		ArrayList<TreeNode> ee = new ArrayList<>();
		ee.add(E1);
		
		ArrayList<TreeNode> dd = new ArrayList<>();
		dd.add(D1);
		
		ArrayList<TreeNode> cc = new ArrayList<>();
		cc.add(C1);
		cc.add(C2);
		
		ArrayList<TreeNode> bb = new ArrayList<>();
		bb.add(B1);
		bb.add(B2);
		bb.add(B3);
		
		TreeNode E = new TreeNode(10, ee);
		TreeNode D = new TreeNode(9, dd);
		TreeNode C = new TreeNode(8, cc);
		TreeNode B = new TreeNode(7, bb);
		
		ArrayList<TreeNode> aa = new ArrayList<>();
		aa.add(B);
		aa.add(C);
		aa.add(D);
		aa.add(E);
		
		TreeNode A = new TreeNode(-60, aa);
		System.out.println(high.solve(A).val);
	}
}
