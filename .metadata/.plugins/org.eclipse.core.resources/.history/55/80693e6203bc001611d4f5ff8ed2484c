import java.util.ArrayList;

class multiTreeNode {
	int val;
	ArrayList<multiTreeNode> child;

	public multiTreeNode(int val, ArrayList<multiTreeNode> child) {
		this.val = val;
		this.child = new ArrayList<>(child);
	}
	
	@Override
	public String toString() {
		// TODO Auto-generated method stub
		return this.val+"";
	}
}


public class AveHigh {
	public multiTreeNode solve(multiTreeNode root) {
		Parcel recoder = new Parcel(null, Double.MIN_VALUE);
		DFS(root, recoder);
		return recoder.big;		
	}
	
	public double[] DFS(multiTreeNode root, Parcel recorder) {
		double[] res = new double[2];
		
		if(root == null){
			return res;
		}
		
		res[0] = 1;
		res[1] = root.val;
		
		if(root.child == null || root.child.size() == 0){
			return res;
		}
		
		for(int i = 0 ; i<root.child.size() ;i++){
			double[] temp = DFS(root.child.get(i), recorder);
			res[0] += temp[0];
			res[1] += temp[1];
		}
		
		if(res[1]/res[0] > recorder.ave){
			recorder.ave = res[1]/res[0];
			recorder.big = root;
		}
		
		System.out.println(recorder.ave);
		System.out.println(recorder.big);
		return res;
	}

	class Parcel{
		multiTreeNode big;
		double ave;
		
		public Parcel(multiTreeNode big , double ave) {
			this.big = big;
			this.ave = ave;
		}
	}
	
	
	
	
	
	
	/**********************************************/
	
	public static void main(String [] args){
		AveHigh high = new AveHigh();
		multiTreeNode E5 = new multiTreeNode(500, new ArrayList<>());
		multiTreeNode E4 = new multiTreeNode(4, new ArrayList<>());
		multiTreeNode E3 = new multiTreeNode(3, new ArrayList<>());
		ArrayList<multiTreeNode> e2 = new ArrayList<>();
		e2.add(E3);
		e2.add(E4);
		multiTreeNode E2 = new multiTreeNode(2, e2);
		ArrayList<multiTreeNode> e1 = new ArrayList<>();
		e1.add(E2);
		e1.add(E5);
		multiTreeNode E1 = new multiTreeNode(1, e1);
		
		multiTreeNode D1 = new multiTreeNode(1, new ArrayList<>());
		
		multiTreeNode C1 = new multiTreeNode(1, new ArrayList<>());
		multiTreeNode C2 = new multiTreeNode(2, new ArrayList<>());
		
		multiTreeNode B1 = new multiTreeNode(100, new ArrayList<>());
		multiTreeNode B2 = new multiTreeNode(2, new ArrayList<>());
		multiTreeNode B3 = new multiTreeNode(3, new ArrayList<>());
		
		ArrayList<multiTreeNode> ee = new ArrayList<>();
		ee.add(E1);
		
		ArrayList<multiTreeNode> dd = new ArrayList<>();
		dd.add(D1);
		
		ArrayList<multiTreeNode> cc = new ArrayList<>();
		cc.add(C1);
		cc.add(C2);
		
		ArrayList<multiTreeNode> bb = new ArrayList<>();
		bb.add(B1);
		bb.add(B2);
		bb.add(B3);
		
		multiTreeNode E = new multiTreeNode(10, ee);
		multiTreeNode D = new multiTreeNode(9, dd);
		multiTreeNode C = new multiTreeNode(8, cc);
		multiTreeNode B = new multiTreeNode(7, bb);
		
		ArrayList<multiTreeNode> aa = new ArrayList<>();
		aa.add(B);
		aa.add(C);
		aa.add(D);
		aa.add(E);
		
		multiTreeNode A = new multiTreeNode(-60, aa);
		System.out.println(high.solve(A).val);
	}
}
