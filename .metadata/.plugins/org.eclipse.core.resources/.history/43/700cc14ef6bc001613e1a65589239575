import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;

public class P2_MST_Kruskal {
	// by implementing the Kruskal Algorithm and with help of Union Find
	// structure
	// find the all possible low cost ways to connect those cities
	public ArrayList<Connection> connect(ArrayList<Connection> connections) {	
		if (connections == null || connections.size() == 0) {
			return new ArrayList<Connection>();
		}
		
		ArrayList<Connection> ans = new ArrayList<Connection>();
		HashMap<String, Integer> map = new HashMap<>();
		int cityCount = 0;
		int connectionCount = 0;
		
		for (Connection i : connections) {
			String city1 = i.city1;
			String city2 = i.city2;
			
			if (!map.containsKey(city1)) {
				map.put(city1, cityCount++);
			}
			
			if (!map.containsKey(city2)) {
				map.put(city2, cityCount++);
			}
		}
		
		Collections.sort(connections, new Comparator<Connection>() {
			@Override
			public int compare(Connection a, Connection b) {
				return a.cost - b.cost;
			}
		});
		
		int[] uf = new int[cityCount];
		int totalCost = 0;
		
		for (int i = 0; i < uf.length; i++) {
			uf[i] = i;
		}		
		
		for (int i = 0; i < connections.size(); i++) {
			Connection c = connections.get(i);
			int cityIndex1 = map.get(c.city1);
			int cityIndex2 = map.get(c.city2);
			int parent1 = find(uf, cityIndex1);
			int parent2 = find(uf, cityIndex2);
			
			if (parent1 != parent2) {
				connectionCount++;
				totalCost += c.cost;
				ans.add(c);
				uf[parent1] = parent2; // union
			}

			if (connectionCount + 1 == cityCount) {
				break;
			}
		}

		Collections.sort(ans, new Comparator<Connection>() {
			@Override
			public int compare(Connection c1, Connection c2) {
				if (!c1.city1.equals(c2.city1)) {
					return c1.city1.compareTo(c2.city1);			
				} else {
					return c1.city2.compareTo(c2.city2);
				}
			}
		});
		
		return connectionCount + 1 == cityCount ? ans : null; // pay attention!!!!!  null
	}
	
	public static int find(int[] arr, int parent) {
		while (arr[parent] != parent) {
			arr[parent] = arr[arr[parent]]; // path compression,for performance improve
			parent = arr[parent];
		}
		return parent;
	}
	
	
	
	
	
	
	
	/*********************** main function***************************/
	public static void main(String[] args) {
		P2_MST_Kruskal kruskal = new P2_MST_Kruskal();
		ArrayList<Connection> list = new ArrayList<>();

		Connection c1 = new Connection("A", "B", 1);
		Connection c2 = new Connection("A", "D", 9);
		Connection c3 = new Connection("A", "C", 6);
		Connection c4 = new Connection("B", "D", 3);
		Connection c5 = new Connection("B", "E", 8);
		Connection c6 = new Connection("D", "E", 24);
		Connection c7 = new Connection("C", "E", 2);
		Connection c8 = new Connection("A", "B", 2);

		list.add(c1);
		list.add(c2);
		list.add(c3);
		list.add(c4);
		list.add(c5);
		list.add(c6);
		list.add(c7);
		list.add(c8);

		System.out.println(kruskal.connect(list));
	}
}
