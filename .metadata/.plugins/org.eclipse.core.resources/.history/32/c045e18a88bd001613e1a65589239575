
public class P1_Longest_Palindrome {
	public String longestPalindrome(String s) {
        if(s == null || s.length() <= 1) {
            return s;
        }

        Pair p = new Pair(0, 0);
        
        for(int i = 0; i < s.length() - 1; i++) {
            p = getPalindrome(p, s, i, i);
            p = getPalindrome(p, s, i, i + 1);
        }
        
        return s.substring(p.startIndex, p.startIndex + p.maxLen);
    }
    
    public Pair getPalindrome(Pair p, String s, int start, int end) {
        int startIndex = p.startIndex; 
        int maxLen = p.maxLen;
        
        while(start >= 0 && end < s.length() && s.charAt(start) == s.charAt(end)) {
            start--;
            end++;
        }
        
        if(maxLen < end - start - 1) {
            maxLen = end - start - 1;
            startIndex = start + 1;
        }
        
        return new Pair(startIndex, maxLen);
    }
    
    class Pair {
        int startIndex;
        int maxLen;
        
        public Pair(int startIndex, int maxLen) {
            this.startIndex = startIndex;
            this.maxLen = maxLen;
        }
    }
}
