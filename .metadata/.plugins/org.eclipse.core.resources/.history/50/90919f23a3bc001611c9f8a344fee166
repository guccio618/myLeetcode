import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;

public class Kruskal {
	// by implementing the Kruskal Algorithm and with help of Union Find
	// structure
	// find the all possible low cost ways to connect those cities
	public ArrayList<Connection> connect(ArrayList<Connection> connections) {	
		if (connections == null || connections.size() == 0) {
			return new ArrayList<>();
		}
		
		ArrayList<Connection> res = new ArrayList<>();
		HashMap<String, Integer> map = new HashMap<>();
		int cityCount = 0;
		int connectionCount = 0;
		
		for (Connection i : connections) {
			String a = i.city1;
			String b = i.city2;
			
			if (!map.containsKey(a)) {
				map.put(a, cityCount++);
			}
			
			if (!map.containsKey(b)) {
				map.put(b, cityCount++);
			}
		}
		
		Collections.sort(connections, new Comparator<Connection>() {
			@Override
			public int compare(Connection a, Connection b) {
				return a.cost - b.cost;
			}
		});
		
		int[] uf = new int[cityCount];
		int cost = 0;
		
		for (int i = 0; i < uf.length; i++) {
			uf[i] = i;
		}		
		
		for (int i = 0; i < connections.size(); i++) {
			Connection c = connections.get(i);
			int one = map.get(c.city1);
			int two = map.get(c.city2);
			int findOne = find(uf, one);
			int findTwo = find(uf, two);
			
			if (findOne != findTwo) {
				connectionCount++;
				cost += c.cost;
				res.add(c);
				uf[findOne] = findTwo; // union
			}

			if (connectionCount + 1 == cityCount) {
				break;
			}
		}

		Collections.sort(res, new Comparator<Connection>() {
			@Override
			public int compare(Connection c1, Connection c2) {
				if (c1.city1.equals(c2.city1)) {
					return c1.city2.compareTo(c2.city2);
				} else {
					return c1.city1.compareTo(c2.city1);
				}
			}
		});
		
//		for (int i = 0; i < res.size(); i++) {
//			System.out.println(res.get(i));
//		}
		
		return connectionCount + 1 == cityCount ? res : null; // pay attention!!!!!  null
	}

	public static int find(int[] arr, int i) {
		while (arr[i] != i) {
			arr[i] = arr[arr[i]]; // path compression,for performance improve
			i = arr[i];
		}
		return i;
	}
	
	

	public static void main(String[] args) {
		Kruskal kruskal = new Kruskal();
		ArrayList<Connection> list = new ArrayList<>();

		Connection c1 = new Connection("A", "B", 1);
		Connection c2 = new Connection("A", "D", 9);
		Connection c3 = new Connection("A", "C", 6);
		Connection c4 = new Connection("B", "D", 3);
		Connection c5 = new Connection("B", "E", 8);
		Connection c6 = new Connection("D", "E", 24);
		Connection c7 = new Connection("C", "E", 2);
		Connection c8 = new Connection("A", "B", 2);

		list.add(c1);
		list.add(c2);
		list.add(c3);
		list.add(c4);
		list.add(c5);
		list.add(c6);
		list.add(c7);
		list.add(c8);

		System.out.println(kruskal.connect(list));
	}
}
