import java.util.*;
/********
 * 
A string such as "word" contains the following abbreviations:

["word", "1ord", "w1rd", "wo1d", "wor1", "2rd", "w2d", "wo2", "1o1d", "1or1", "w1r1", "1o2", "2r1", "3d", "w3", "4"]
Given a target string and a set of strings in a dictionary, find an abbreviation of this target string with the smallest possible length such that it does not conflict with abbreviations of the strings in the dictionary.

Each number or letter in the abbreviation is considered length = 1. For example, the abbreviation "a32bc" has length = 4.

Note:
	In the case of multiple answers as shown in the second example below, you may return any one of them.
	Assume length of target string = m, and dictionary size = n. You may assume that m ≤ 21, n ≤ 1000, and log2(n) + m ≤ 20.

Examples:
	"apple", ["blade"] -> "a4" (because "5" or "4e" conflicts with "blade")
	"apple", ["plain", "amber", "blade"] -> "1p3" (other valid answers include "ap3", "a3e", "2p2", "3le", "3l1").
	
 * 
 * */

public class Q411_Minimum_Unique_Word_Abbreviation {
	// test case: 
	// 	(1): [abc] [""] 
	//  (2): [internationalize], ["xnternationalize", "ixternationalize", "inxernationalize", "intxrnationalize", "intexnationalize"]
	
	public String minAbbreviation(String target, String[] dictionary) {
		if(target == null || target.length() == 0) {
            return "";
        } else if(dictionary == null || dictionary.length == 0) {
        	return Integer.toString(target.length());
        }
        
        Map<String, Integer> dictAbbrMap = new HashMap<>();
        Map<String, Integer> targetAbbrMap = new HashMap<>();
        
        for(String word : dictionary) {
            getAbbr(dictAbbrMap, word, 0, "", 0, 0);
        }
        
        getAbbr(targetAbbrMap, target, 0, "", 0, 0);
        int minLen = Integer.MAX_VALUE;
        String ans = null;
        
        for(Map.Entry<String, Integer> entry : targetAbbrMap.entrySet()) {
            String abbr = entry.getKey();
            int len = entry.getValue();
            
//            System.out.println(abbr + " " + len);
            
            if(!dictAbbrMap.containsKey(abbr) && minLen > len) {
                minLen = len;
                ans = abbr;
            }
        }
        
        return ans;
    }
    
    public void getAbbr(Map<String, Integer> map, String word, int pos, String solution, int solutionLen, int count) {
        if(pos == word.length()) {
            solution += (count > 0) ? count : "";
            solutionLen += (count > 0) ? 1 : 0;
            map.put(solution, solutionLen);
            return;
        }
        
        getAbbr(map, word, pos + 1, solution, solutionLen, count + 1);
        getAbbr(map, word, pos + 1, solution + (count > 0 ? count : "") + word.charAt(pos), solutionLen + (count > 0 ? 1 : 0) + 1, 0);
    }
    
    
    
    
    
    
    
    
    
    
    
    /******************************* main function ***************************************/
    
    public static void main(String[] args) {
    	Q411_Minimum_Unique_Word_Abbreviation t = new Q411_Minimum_Unique_Word_Abbreviation();
    	String[] dictionary = {"aaaaa","bbbbb","ccccc","ddddd","eeeee"};
    	String target = "abcde";
    	System.out.println(t.minAbbreviation(target, dictionary));
    	
    }
}
