import java.util.*;

public class Amazon_OA2_Close_Two_Sum {
	public static void findOptimalWeights(double capacity, double[] weights, int numOfContainers) {
		if(weights == null || weights.length == 0){
			return ;
		}
		
		int left = 0, right = weights.length - 1;
		double diff = Double.MAX_VALUE;
		int minPos = 0;
		int maxPos = weights.length - 1;
		Arrays.sort(weights);
		
		while (left < right) {
			double sum = weights[left] + weights[right];
			
			if(sum == capacity){
				minPos = left;
				maxPos = right;
				break;
			} else if(sum < capacity){
				if(capacity - sum < diff){
					diff = capacity - sum;
					minPos = left;
					maxPos = right;
				}
				left++;
			} else {
				right--;
			}
		}
		
		System.out.println("The two numbers for which sum is closest to target are " + weights[minPos] + " and " + weights[maxPos]);
	}
	
	public static void findOptimalWeights2(double capacity, double[] weights, int numOfContainers) {
		if(weights == null || weights.length == 0){
			return ;
		}
		
		double min = 0.0;
		int minPos = 0;
		int maxPos = weights.length - 1;
		int left = 0, right = weights.length - 1;
		Arrays.sort(weights);
		
		while (left < right) {
			double sum = weights[left] + weights[right];
			
			if (sum > min && sum <= capacity) {
				min = sum;
				minPos = left;
				maxPos = right;
			}
			if (sum > capacity) {
				right--;
			} else {
				left++;
			}
		}
		
		System.out.println("The two numbers for which sum is closest to target are " + weights[minPos] + " and " + weights[maxPos]);
	}
	
	
	
	
	
	public void findClosetTwoSum3(double[] weight, double capacity) {
		if(weight == null || weight.length == 0){
			return ;
		}
		
		Arrays.sort(weight);
		int leftPoint = 0, rightPoint = weight.length - 1;
		double diff = Double.MAX_VALUE;
		int startPos = 0, endPos = 0;
		
		while(leftPoint < rightPoint){
			double sum = weight[leftPoint] + weight[rightPoint];
			
			if(sum <= capacity){
				if(diff > capacity - sum){
					diff = capacity - sum;
					startPos = leftPoint;
					endPos = rightPoint;
				}
			}
			
			if(sum > capacity){
				rightPoint--;
			} else if(sum < capacity){
				leftPoint++;
			} else {
				break;
			}
		}
		
		System.out.println(weight[startPos] + ", " + weight[endPos]);
	}
	
	
	
	
	public static void main(String[] args){
		Amazon_OA2_Close_Two_Sum t = new Amazon_OA2_Close_Two_Sum();
		double[] weights = {2,3,4,7,8,5,4,3,7,9};
		double capacity = 7;
		t.findOptimalWeights(capacity, weights, 1);
		t.findOptimalWeights2(capacity, weights, 1);
		t.findClosetTwoSum3(weights, capacity);
	}
}
