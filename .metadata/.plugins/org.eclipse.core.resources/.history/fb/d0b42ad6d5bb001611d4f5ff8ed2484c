import java.util.ArrayList;
import java.util.List;


public class Amazon_Maximum_Subtree_of_Average {
	private TreeNode ansNode = null;
	private double maxAve = Double.MIN_VALUE;
	
	public TreeNode binaryTreePaths(TreeNode root) {
		if(root == null){
			return root;
		}

		helper(root);
		System.out.println(maxAve);
		return ansNode;
	}
	
	public int[] helper(TreeNode node){
		if(node == null){
			return new int[2];
		} else if(node.left == null && node.right == null){
			int[] ans = new int[2];
			ans[0] = node.val;
			ans[1] = 1;
			return ans;
		}
		
		int[] left = helper(node.left);
		int[] right = helper(node.right);
		int[] ans = new int[2];
		ans[0] = left[0] + right[0] + node.val;
		ans[1] = left[1] + right[1] + 1;
		double ave = (ans[0] * 1.0) / ans[1];
		
		if(ave > maxAve){
			maxAve = ave;
			ansNode = node;
		}

		return ans;
	}
	
	
	
	// 多叉树
	private myTreeNode ansNode2 = null;
	private double maxAve2 = Double.MIN_VALUE;
	
	public myTreeNode binaryTreePaths2(myTreeNode root) {
		if(root == null){
			return root;
		}

		helper2(root);
		System.out.println(maxAve2);
		return ansNode2;
	}
	
	public int[] helper2(myTreeNode node){
		if(node == null){
			return new int[2];
		} else if(node.child.size() == 0){
			int[] ans = new int[2];
			ans[0] = node.val;
			ans[1] = 1;
			return ans;
		}
		
		int[] ans = new int[2];
		
		for(myTreeNode sub : node.child){
			int[] subAns = helper2(sub);
			ans[0] += subAns[0];
			ans[1] += subAns[1];
		}
		
		ans[0] += node.val;
		ans[1] += 1;
		double ave = (ans[0] * 1.0) / ans[1];
		
		if(ave > maxAve2){
			maxAve2 = ave;
			ansNode2 = node;
		}

		return ans;
	}
	
	
	
	/***********************************************************/
	public static void main(String[] args){
		Amazon_Maximum_Subtree_of_Average t = new Amazon_Maximum_Subtree_of_Average();
		
		TreeNode root = new TreeNode(1);
		root.left = new TreeNode(2);
		root.left.left = new TreeNode(5);
		root.left.right = new TreeNode(6);
		root.right = new TreeNode(3);
		root.right.left = new TreeNode(7);
		root.right.right = new TreeNode(8);
		
		myTreeNode root2 = new myTreeNode(1);
		myTreeNode child1 = new myTreeNode(2);
		child1.child.add(new myTreeNode(5));
		child1.child.add(new myTreeNode(5));
		myTreeNode child2 = new myTreeNode(3);
		child2.child.add(new myTreeNode(5));
		child2.child.add(new myTreeNode(5));
		myTreeNode child3 = new myTreeNode(4);
		child3.child.add(new myTreeNode(5));
		child3.child.add(new myTreeNode(5));
		
		root2.child.add(child1);
		root2.child.add(child2);
		root2.child.add(child3);
		
		System.out.println(t.binaryTreePaths(root).val);
		System.out.println(t.binaryTreePaths2(root2).val);
	}	
}

class myTreeNode{
	int val;
	List<myTreeNode> child;
	
	public myTreeNode(int v){
		val = v;
		child = new ArrayList<myTreeNode>();
	}
}
