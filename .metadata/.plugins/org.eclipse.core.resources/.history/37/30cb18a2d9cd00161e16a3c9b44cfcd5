import java.util.PriorityQueue;

import javax.rmi.CORBA.Tie;

public class Factory_Candy {
	public int findMinTime(int factoryNum, int candyNum, int[] candyNeed) {
		if(factoryNum <= 0 || candyNum <= 0 || candyNeed == null || candyNeed.length == 0 || factoryNum < candyNum) {
			return 0;
		}
		
		int availFactory = factoryNum - candyNum;
		PriorityQueue<Integer> maxHeap = new PriorityQueue<>();
		
		for(int need : candyNeed) {
			maxHeap.offer(-need);
		}
		
		while(availFactory > 0) {
			int curMaxTime = -maxHeap.poll();
			int part1 = (curMaxTime%2 == 1) ? curMaxTime/2 + 1 : curMaxTime/2;
			int part2 = curMaxTime/2;
			maxHeap.offer(-part1);
			maxHeap.offer(-part2);
			availFactory--;
		}
		
		return -maxHeap.poll();
	}
	
	
	public static void main(String[] args) {
		Factory_Candy t = new Factory_Candy();
		int[] candyNeed = {3,6,9,3,5};
		int factoryNum = 6;
		int candyNum = 5;		
		System.out.println(t.findMinTime(factoryNum, candyNum, candyNeed));
	}
}
